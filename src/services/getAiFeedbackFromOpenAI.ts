import { openai } from './openai'

type GetAiSupabaseFeedbackT = {
  assistant_id: string
  report: string
  language_code: string
  full_name: string
}

function removeAnnotations(text: string): string {
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
  const annotationPattern = /„Äê\d+:\d+‚Ä†source„Äë/g
  // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  return text.replace(annotationPattern, '')
}

export async function getAiFeedbackFromSupabase({
  assistant_id,
  report,
  language_code,
  full_name,
}: GetAiSupabaseFeedbackT): Promise<{ ai_response: string }> {
  if (!assistant_id) throw new Error('Assistant ID is not set')
  if (!report) throw new Error('Report is not set')
  if (!language_code) throw new Error('Language code is not set')
  if (!full_name) throw new Error('Full name is not set')

  const apiKey = process.env.OPENAI_API_KEY
  if (!apiKey) {
    throw new Error('OpenAI API key is not set')
  }

  try {
    // Step 1: Create a thread with necessary parameters
    const thread = await openai.beta.threads.create()

    await openai.beta.threads.messages.create(thread.id, {
      role: 'user',
      content: report,
    })

    // Step 3: Run the assistant using assistantId
    const run = await openai.beta.threads.runs.createAndPoll(thread.id, {
      assistant_id,
      instructions: `–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏: ${full_name}.

–û–ß–ï–ù–¨ –í–ê–ñ–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.
–ö–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${language_code}
- –ï—Å–ª–∏ language_code = 'lt' - –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ª–∏—Ç–æ–≤—Å–∫–æ–º —è–∑—ã–∫–µ (lietuvi≈≥ kalba)
- –ï—Å–ª–∏ language_code = 'ru' - –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ï—Å–ª–∏ language_code = 'en' - –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (English)

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ, –∞ language_code —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–π - –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

–í—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –±–ª–æ–∫–∞–º –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º.

**–í–∞—à–∞ —Ä–æ–ª—å:**
‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –±–ª–æ–∫–∞–º HAUS, –æ—Å–æ–±–µ–Ω–Ω–æ P6-20
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –±–ª–æ–∫–æ–≤
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –Ω–æ—Ä–º–∞–º –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
‚Ä¢ –ü–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞—Å—á–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±—ä–µ–º–æ–≤

**–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ HAUS P6-20 –±–ª–æ–∫–∏-–æ–ø–∞–ª—É–±–∫–∞ –∏–∑ –±–µ—Ç–æ–Ω–∞
‚Ä¢ –†–∞–∑–º–µ—Ä—ã: 498√ó198√ó250 –º–º (M) –∏ 508√ó198√ó250 –º–º (K)
‚Ä¢ –†–∞—Å—Ö–æ–¥ –±–µ—Ç–æ–Ω–∞: 0.015 –º¬≥ –Ω–∞ –±–ª–æ–∫
‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç—ã, —Ä–æ—Å—Ç–≤–µ—Ä–∫–∏, –ø–æ–¥–ø–æ—Ä–Ω—ã–µ —Å—Ç–µ–Ω—ã, –ø–µ—Ä–µ–º—ã—á–∫–∏
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã: +37064608801, haus@vbg.lt

**–ü—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *–∫—É—Ä—Å–∏–≤* –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–ª—è –≤–∞–∂–Ω–æ–≥–æ
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–ø–∏—Å–∫–∏ —Å ‚Ä¢ –∏–ª–∏ -
‚Ä¢ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ # –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–æ–Ω–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Telegram)
‚Ä¢ –í–º–µ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç:**
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ üèóÔ∏è üß± üìê üíß
‚Ä¢ –î–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–π—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏`,
    })

    // Step 4: Periodically retrieve the run to check its status
    if (run.status === 'completed') {
      const messages = await openai.beta.threads.messages.list(run.thread_id)
      console.log(messages, 'messages')
      for (const message of messages.data.reverse()) {
        if (message.role === 'assistant') {
          console.log(message.content, 'message.content')

          const content = message.content[0]
          console.log(content, 'content')
          if (content && content.type === 'text' && content.text) {
            return {
              ai_response: removeAnnotations(content.text.value),
            }
          }
        }
      }
    } else {
      console.log(run.status)
      return { ai_response: '' }
    }
  } catch (error) {
    console.error('Error querying OpenAI Assistant:', error)
    throw error
  }
  
  // Fallback return
  return { ai_response: '' }
}
