import { openai } from "./openai";
import { faqService } from "./faqService";

interface EnhancedAssistantRequest {
  message: string;
  userName: string;
  userLanguage: string;
  useFAQContext?: boolean;
}

export class EnhancedAssistantService {
  private assistantId: string;

  constructor(assistantId: string) {
    this.assistantId = assistantId;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI Assistant —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º FAQ
   */
  async getResponse({
    message,
    userName,
    userLanguage,
    useFAQContext = true,
  }: EnhancedAssistantRequest): Promise<string | null> {
    try {
      console.log(`[Enhanced Assistant] Creating thread for user: ${userName}`);

      // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread
      const thread = await openai.beta.threads.create();
      console.log(`[Enhanced Assistant] Thread created: ${thread.id}`);

      // –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ thread
      await openai.beta.threads.messages.create(thread.id, {
        role: "user",
        content: message,
      });
      console.log(`[Enhanced Assistant] Message added to thread`);

      // –®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
      const instructions = this.generateEnhancedInstructions(
        userName,
        userLanguage,
        message,
        useFAQContext
      );

      const run = await openai.beta.threads.runs.createAndPoll(thread.id, {
        assistant_id: this.assistantId,
        instructions: instructions,
      });
      console.log(
        `[Enhanced Assistant] Run created with status: ${run.status}`
      );

      // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      if (run.status === "completed") {
        const messages = await openai.beta.threads.messages.list(run.thread_id);

        // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        for (const msg of messages.data.reverse()) {
          if (msg.role === "assistant") {
            const content = msg.content[0];

            if (content && content.type === "text" && content.text) {
              const responseText = this.cleanResponse(content.text.value);
              console.log(
                `[Enhanced Assistant] Response generated for ${userName}`
              );
              return responseText;
            }
          }
        }
      } else {
        console.error(
          `[Enhanced Assistant] Run failed with status: ${run.status}`
        );
        if (run.last_error) {
          console.error(`[Enhanced Assistant] Error details:`, run.last_error);
        }
      }

      return null;
    } catch (error) {
      console.error("[Enhanced Assistant] Error in getResponse:", error);
      throw error;
    }
  }

  private generateEnhancedInstructions(
    userName: string,
    userLanguage: string,
    userQuery: string,
    useFAQContext: boolean
  ): string {
    const languageNames = {
      ru: "—Ä—É—Å—Å–∫–∏–π",
      en: "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
      lt: "–ª–∏—Ç–æ–≤—Å–∫–∏–π",
    };

    const languageName =
      languageNames[userLanguage as keyof typeof languageNames] || "—Ä—É—Å—Å–∫–∏–π";

    let faqContext = "";
    if (useFAQContext) {
      faqContext = faqService.getContextForAI(userQuery);
    }

    return `–ü—Ä–∏–≤–µ—Ç! –¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ HAUS.

${faqContext ? `\nüîç –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô FAQ:\n${faqContext}\n` : ""}

üèóÔ∏è –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ö–ê–¢–ê–õ–û–ì –°–¢–†–û–ò–¢–ï–õ–¨–ù–´–• –ë–õ–û–ö–û–í:

1. **HAUS P6-20** - –ë–ª–æ–∫–∏-–æ–ø–∞–ª—É–±–∫–∞ –∏–∑ –±–µ—Ç–æ–Ω–∞
   üìê –†–∞–∑–º–µ—Ä—ã: 498√ó198√ó250 –º–º (M), 508√ó198√ó250 –º–º (K)
   üíß –†–∞—Å—Ö–æ–¥ –±–µ—Ç–æ–Ω–∞: 0.015 –º¬≥/–±–ª–æ–∫  
   üì¶ –í –ø–∞–ª–ª–µ—Ç–µ: 50 —à—Ç (40–ú + 10–ö)
   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –§—É–Ω–¥–∞–º–µ–Ω—Ç—ã, —Ä–æ—Å—Ç–≤–µ—Ä–∫–∏, –ø–æ–¥–ø–æ—Ä–Ω—ã–µ —Å—Ç–µ–Ω—ã, –ø–µ—Ä–µ–º—ã—á–∫–∏

2. **HAUS P6-15** - –ë–ª–æ–∫–∏-–æ–ø–∞–ª—É–±–∫–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω—ã–µ
   üìê –†–∞–∑–º–µ—Ä—ã: 498√ó148√ó250 –º–º
   üíß –†–∞—Å—Ö–æ–¥ –±–µ—Ç–æ–Ω–∞: 0.012 –º¬≥/–±–ª–æ–∫
   üì¶ –í –ø–∞–ª–ª–µ—Ç–µ: 60 —à—Ç (48–ú + 12–ö)
   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–µ–Ω—ã, –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏

3. **HAUS P8-20** - –ë–ª–æ–∫–∏-–æ–ø–∞–ª—É–±–∫–∞ —É—Å–∏–ª–µ–Ω–Ω—ã–µ
   üìê –†–∞–∑–º–µ—Ä—ã: 498√ó198√ó300 –º–º
   üíß –†–∞—Å—Ö–æ–¥ –±–µ—Ç–æ–Ω–∞: 0.018 –º¬≥/–±–ª–æ–∫
   üì¶ –í –ø–∞–ª–ª–µ—Ç–µ: 40 —à—Ç (32–ú + 8–ö)
   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ù–µ—Å—É—â–∏–µ —Å—Ç–µ–Ω—ã, –≤—ã—Å–æ–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏

4. **HAUS S25** - –°—Ç–µ–Ω–æ–≤—ã–µ –±–ª–æ–∫–∏
   üìê –†–∞–∑–º–µ—Ä—ã: 498√ó248√ó250 –º–º
   üíß –†–∞—Å—Ö–æ–¥ –±–µ—Ç–æ–Ω–∞: 0.020 –º¬≥/–±–ª–æ–∫
   üì¶ –í –ø–∞–ª–ª–µ—Ç–µ: 40 —à—Ç
   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ù–∞—Ä—É–∂–Ω—ã–µ —Å—Ç–µ–Ω—ã, –Ω–µ—Å—É—â–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

5. **HAUS S6** - –°—Ç–µ–Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç
   üìê –†–∞–∑–º–µ—Ä—ã: 498√ó148√ó250 –º–º
   üíß –†–∞—Å—Ö–æ–¥ –±–µ—Ç–æ–Ω–∞: 0.012 –º¬≥/–±–ª–æ–∫
   üì¶ –í –ø–∞–ª–ª–µ—Ç–µ: 60 —à—Ç
   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–µ—Å—É—â–∏–µ —Å—Ç–µ–Ω—ã

6. **HAUS SM6** - –°—Ç–µ–Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
   üìê –†–∞–∑–º–µ—Ä—ã: 498√ó148√ó250 –º–º
   üíß –†–∞—Å—Ö–æ–¥ –±–µ—Ç–æ–Ω–∞: 0.012 –º¬≥/–±–ª–æ–∫
   üì¶ –í –ø–∞–ª–ª–µ—Ç–µ: 60 —à—Ç
   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –°—Ç–µ–Ω—ã —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏

7. **HAUS SP** - –°—Ç–µ–Ω–æ–≤—ã–µ –±–ª–æ–∫–∏ –ø—Ä–µ–º–∏—É–º
   üìê –†–∞–∑–º–µ—Ä—ã: 498√ó198√ó250 –º–º
   üíß –†–∞—Å—Ö–æ–¥ –±–µ—Ç–æ–Ω–∞: 0.015 –º¬≥/–±–ª–æ–∫
   üì¶ –í –ø–∞–ª–ª–µ—Ç–µ: 50 —à—Ç
   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –≠–ª–∏—Ç–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ

8. **HAUS KL-28** - –ë–ª–æ–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ
   üìê –†–∞–∑–º–µ—Ä—ã: 280√ó198√ó250 –º–º
   üíß –†–∞—Å—Ö–æ–¥ –±–µ—Ç–æ–Ω–∞: 0.010 –º¬≥/–±–ª–æ–∫
   üì¶ –í –ø–∞–ª–ª–µ—Ç–µ: 70 —à—Ç
   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –£–∑–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –¥–æ–±–æ—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

üéØ –¢–í–û–Ø –ì–õ–ê–í–ù–ê–Ø –ó–ê–î–ê–ß–ê:
1. –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ FAQ
2. –ü—Ä–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≥–æ–≤–æ—Ä–∏: "–Ø –ø—Ä–æ–≤–µ—Ä—é —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"
3. –í—Å–µ–≥–¥–∞ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
4. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç FAQ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
5. –ù–∞–ø—Ä–∞–≤–ª—è–π —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º: +37064608801

üìû –ö–û–ù–¢–ê–ö–¢–´:
–¢–µ–ª–µ—Ñ–æ–Ω: +37064608801
Email: haus@vbg.lt  
–°–∞–π—Ç: www.vbg.lt

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —è–∑—ã–∫–µ "${languageName}" (–∫–æ–¥: ${userLanguage})
2. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ FAQ
3. –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - –æ—Ç–ø—Ä–∞–≤–ª—è–π –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
4. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ —Ü–µ–Ω—ã
5. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "${userName}"

${faqContext ? "\nüí° –í–ê–ñ–ù–û: –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FAQ –≤—ã—à–µ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞." : ""}

–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
  }

  private cleanResponse(response: string): string {
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return response
      .replace(/„Äê\d+‚Ä†source„Äë/g, "")
      .replace(/\*\*([^*]+)\*\*/g, "$1")
      .trim();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ FAQ
   */
  analyzeQuery(query: string): {
    needsFAQ: boolean;
    categories: string[];
    products: string[];
    confidence: number;
  } {
    const lowerQuery = query.toLowerCase();

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoryKeywords = {
      technical: [
        "—Ä–∞–∑–º–µ—Ä",
        "–≤–µ—Å",
        "–ø—Ä–æ—á–Ω–æ—Å—Ç—å",
        "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
        "–ø–∞—Ä–∞–º–µ—Ç—Ä",
        "—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü",
      ],
      application: [
        "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
        "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ",
        "–≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
        "–¥–ª—è —á–µ–≥–æ",
        "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
      ],
      installation: [
        "–º–æ–Ω—Ç–∞–∂",
        "—É—Å—Ç–∞–Ω–æ–≤–∫–∞",
        "—Å–±–æ—Ä–∫–∞",
        "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
        "–∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç—å",
      ],
      calculation: ["—Ä–∞—Å—á–µ—Ç", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "—Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ", "–æ–±—ä–µ–º", "—Ä–∞—Å—Ö–æ–¥"],
      pricing: ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "—Ü–µ–Ω—ã", "–ø—Ä–∞–π—Å"],
      delivery: ["–¥–æ—Å—Ç–∞–≤–∫–∞", "–ø–æ—Å—Ç–∞–≤–∫–∞", "–¥–æ—Å—Ç–∞–≤–∏—Ç—å", "–ø—Ä–∏–≤–µ–∑—Ç–∏", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"],
    };

    // –ü—Ä–æ–¥—É–∫—Ç—ã
    const productKeywords = {
      "P6-20": ["p6-20", "p6 20", "–ø6-20", "–ø6 20"],
      "P6-15": ["p6-15", "p6 15", "–ø6-15", "–ø6 15"],
      "P8-20": ["p8-20", "p8 20", "–ø8-20", "–ø8 20"],
      S25: ["s25", "s 25", "—Å25", "—Å 25"],
      S6: ["s6", "s 6", "—Å6", "—Å 6"],
      SM6: ["sm6", "sm 6", "—Å–º6", "—Å–º 6"],
      SP: ["sp", "—Å –ø", "—Å–ø"],
      "KL-28": ["kl-28", "kl 28", "–∫–ª-28", "–∫–ª 28"],
    };

    const detectedCategories: string[] = [];
    const detectedProducts: string[] = [];

    // –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for (const [category, keywords] of Object.entries(categoryKeywords)) {
      if (keywords.some((keyword) => lowerQuery.includes(keyword))) {
        detectedCategories.push(category);
      }
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    for (const [product, keywords] of Object.entries(productKeywords)) {
      if (keywords.some((keyword) => lowerQuery.includes(keyword))) {
        detectedProducts.push(product);
      }
    }

    const needsFAQ =
      detectedCategories.length > 0 || detectedProducts.length > 0;
    const confidence =
      (detectedCategories.length + detectedProducts.length) / 10;

    return {
      needsFAQ,
      categories: detectedCategories,
      products: detectedProducts,
      confidence: Math.min(confidence, 1),
    };
  }
}

export const enhancedAssistantService = new EnhancedAssistantService(
  process.env.OPENAI_ASSISTANT_ID || "asst_YXwdoG87dnMLe95mbvmDGIMb"
);
