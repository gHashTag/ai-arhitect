import { Context } from 'telegraf';
import { SupportedLanguage, determineLanguage } from './i18n';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserLanguagePreference {
  userId: number;
  language: SupportedLanguage;
  updatedAt: Date;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
class UserLanguageStorage {
  private preferences: Map<number, UserLanguagePreference> = new Map();

  // –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getLanguage(userId: number): SupportedLanguage | null {
    const preference = this.preferences.get(userId);
    return preference ? preference.language : null;
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  setLanguage(userId: number, language: SupportedLanguage): void {
    this.preferences.set(userId, {
      userId,
      language,
      updatedAt: new Date()
    });
  }

  // –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  removeLanguage(userId: number): void {
    this.preferences.delete(userId);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
  getAllPreferences(): UserLanguagePreference[] {
    return Array.from(this.preferences.values());
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const storage = new UserLanguageStorage();

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class UserLanguageManager {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
   */
  static getUserLanguage(ctx: Context): SupportedLanguage {
    const userId = ctx.from?.id;
    
    if (!userId) {
      // –ï—Å–ª–∏ –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∏–∑ Telegram
      return determineLanguage(ctx.from?.language_code);
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    const savedLanguage = storage.getLanguage(userId);
    if (savedLanguage) {
      return savedLanguage;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —è–∑—ã–∫—É Telegram
    const detectedLanguage = determineLanguage(ctx.from?.language_code);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫
    storage.setLanguage(userId, detectedLanguage);
    
    return detectedLanguage;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static setUserLanguage(userId: number, language: SupportedLanguage): void {
    storage.setLanguage(userId, language);
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤ —Å–ø–∏—Å–∫–µ
   */
  static toggleUserLanguage(ctx: Context): SupportedLanguage {
    const userId = ctx.from?.id;
    if (!userId) {
      return 'lt';
    }

    const currentLanguage = this.getUserLanguage(ctx);
    const languages: SupportedLanguage[] = ['lt', 'ru', 'en'];
    const currentIndex = languages.indexOf(currentLanguage);
    const nextIndex = (currentIndex + 1) % languages.length;
    const nextLanguage = languages[nextIndex];

    storage.setLanguage(userId, nextLanguage);
    return nextLanguage;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ –¥–ª—è —è–∑—ã–∫–∞
   */
  static getLanguageFlag(language: SupportedLanguage): string {
    switch (language) {
      case 'lt': return 'üá±üáπ';
      case 'ru': return 'üá∑üá∫';
      case 'en': return 'üá¨üáß';
      default: return 'üåê';
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ
   */
  static getLanguageName(language: SupportedLanguage): string {
    switch (language) {
      case 'lt': return 'Lietuvi≈≥';
      case 'ru': return '–†—É—Å—Å–∫–∏–π';
      case 'en': return 'English';
      default: return language;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
   */
  static getLanguageButton(currentLanguage: SupportedLanguage): string {
    const flag = this.getLanguageFlag(currentLanguage);
    const name = this.getLanguageName(currentLanguage);
    return `${flag} ${name}`;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static clearUserLanguage(userId: number): void {
    storage.removeLanguage(userId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤
   */
  static getLanguageStats(): Record<SupportedLanguage, number> {
    const stats: Record<SupportedLanguage, number> = {
      lt: 0,
      ru: 0,
      en: 0
    };

    storage.getAllPreferences().forEach(pref => {
      stats[pref.language]++;
    });

    return stats;
  }
}
