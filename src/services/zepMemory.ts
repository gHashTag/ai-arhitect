import { ZepClient, Zep } from "@getzep/zep-cloud";

// –ö–ª–∏–µ–Ω—Ç Zep –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
let zepClient: ZepClient | null = null;

interface IMemoryContent {
  role: string;
  content: string;
  metadata?: Record<string, any>;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é —á–µ—Ä–µ–∑ Zep Cloud
 */
export class ZepMemoryService {
  private static instance: ZepMemoryService;

  private constructor() {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (Singleton)
   */
  public static async getInstance(): Promise<ZepMemoryService> {
    if (!ZepMemoryService.instance) {
      ZepMemoryService.instance = new ZepMemoryService();
      await ZepMemoryService.instance.initialize();
    }
    return ZepMemoryService.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  private async initialize() {
    console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Zep –ø–∞–º—è—Ç–∏...");

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
      const apiKey = process.env.ZEP_API_KEY;
      if (!apiKey) {
        throw new Error("ZEP_API_KEY is required");
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Zep Cloud
      zepClient = new ZepClient({
        apiKey,
      });

      console.log("‚úÖ Zep –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Zep –ø–∞–º—è—Ç–∏:", error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep
   */
  private async ensureUser(userId: number): Promise<void> {
    if (!zepClient) {
      throw new Error("Zep client not initialized");
    }

    try {
      const userIdStr = `user_${userId}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      try {
        await zepClient.user.get(userIdStr);
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return;
      } catch (error: any) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        if (
          error.message?.includes("not found") ||
          error.message?.includes("404")
        ) {
          await zepClient.user.add({
            userId: userIdStr,
            email: `user_${userId}@telegram.bot`,
            firstName: `User`,
            lastName: `${userId}`,
            metadata: {
              source: "telegram_bot",
              created_at: new Date().toISOString(),
            },
          });
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdStr} —Å–æ–∑–¥–∞–Ω –≤ Zep`);
        } else {
          throw error;
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ Zep:`, error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async ensureSession(userId: number): Promise<string> {
    if (!zepClient) {
      throw new Error("Zep client not initialized");
    }

    const userIdStr = `user_${userId}`;
    const sessionId = `session_${userId}_${Date.now()}`;

    try {
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await this.ensureUser(userId);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      await zepClient.memory.addSession({
        sessionId,
        userId: userIdStr,
        metadata: {
          source: "telegram_bot",
          created_at: new Date().toISOString(),
        },
      });

      console.log(
        `‚úÖ –°–µ—Å—Å–∏—è ${sessionId} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdStr}`
      );
      return sessionId;
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
        error
      );
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async getActiveSession(userId: number): Promise<string> {
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
    const sessionId = `session_${userId}`;
    const userIdStr = `user_${userId}`;

    if (!zepClient) {
      throw new Error("Zep client not initialized");
    }

    try {
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await this.ensureUser(userId);

      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
      try {
        await zepClient.memory.getSession(sessionId);
        return sessionId;
      } catch (error: any) {
        // –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        if (
          error.message?.includes("not found") ||
          error.message?.includes("404")
        ) {
          await zepClient.memory.addSession({
            sessionId,
            userId: userIdStr,
            metadata: {
              source: "telegram_bot",
              persistent: true,
              created_at: new Date().toISOString(),
            },
          });
          console.log(
            `‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è ${sessionId} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdStr}`
          );
          return sessionId;
        } else {
          throw error;
        }
      }
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
        error
      );
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
   */
  public async addMessage(
    userId: number,
    message: {
      role: "user" | "assistant";
      content: string;
      metadata?: Record<string, any>;
    }
  ) {
    if (!zepClient) {
      throw new Error("Zep client not initialized");
    }

    try {
      const sessionId = await this.getActiveSession(userId);

      const zepMessage: Zep.Message = {
        roleType: message.role as Zep.RoleType,
        content: message.content,
        metadata: {
          ...message.metadata,
          timestamp: new Date().toISOString(),
          userId: userId,
          source: "telegram_bot",
        },
      };

      await zepClient.memory.add(sessionId, {
        messages: [zepMessage],
      });

      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Zep –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Zep:", error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
   */
  public async getRecentMessages(
    userId: number,
    limit: number = 10
  ): Promise<IMemoryContent[]> {
    if (!zepClient) {
      throw new Error("Zep client not initialized");
    }

    try {
      const sessionId = await this.getActiveSession(userId);

      const memory = await zepClient.memory.get(sessionId, {
        lastn: limit,
      });

      if (!memory.messages) {
        return [];
      }

      return memory.messages.map((m: any) => ({
        role: m.roleType || m.role || "unknown",
        content: m.content || "",
        metadata: m.metadata,
      }));
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ Zep:", error);
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
   */
  public async searchMessages(
    userId: number,
    query: string,
    limit: number = 5
  ): Promise<IMemoryContent[]> {
    if (!zepClient) {
      throw new Error("Zep client not initialized");
    }

    try {
      const userIdStr = `user_${userId}`;

      const searchResults = await zepClient.memory.searchSessions({
        userId: userIdStr,
        text: query,
        limit,
      });

      if (!searchResults || !searchResults.results) {
        return [];
      }

      return searchResults.results.map((result: any) => ({
        role: result.message?.roleType || result.message?.role || "unknown",
        content: result.message?.content || "",
        metadata: result.message?.metadata,
      }));
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Zep:", error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  public async getUserFacts(userId: number): Promise<string[]> {
    if (!zepClient) {
      throw new Error("Zep client not initialized");
    }

    try {
      const userIdStr = `user_${userId}`;

      const facts = await zepClient.user.getFacts(userIdStr);

      if (!facts || !facts.facts) {
        return [];
      }

      return facts.facts.map(
        (fact: any) => fact.fact || fact.content || String(fact)
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Zep:", error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–∞–∫—Ç—ã + –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
   */
  public async getUserContext(userId: number): Promise<string> {
    try {
      const sessionId = await this.getActiveSession(userId);

      if (!zepClient) {
        throw new Error("Zep client not initialized");
      }

      const memory = await zepClient.memory.get(sessionId);

      let context = "";

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã
      if (memory.relevantFacts && memory.relevantFacts.length > 0) {
        context += "–§–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n";
        memory.relevantFacts.forEach((fact: any) => {
          context += `- ${fact.fact || fact.content}\n`;
        });
        context += "\n";
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (memory.messages && memory.messages.length > 0) {
        context += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n";
        memory.messages.forEach((msg: any) => {
          context += `${msg.roleType === "user" ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"}: ${msg.content}\n`;
        });
      }

      return context;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Zep:",
        error
      );
      return "";
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async clearUserHistory(userId: number) {
    if (!zepClient) {
      throw new Error("Zep client not initialized");
    }

    try {
      const sessionId = `session_${userId}`;

      // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é (—ç—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
      await zepClient.memory.delete(sessionId);

      console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ—á–∏—â–µ–Ω–∞`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ Zep:", error);
    }
  }
}
