import OpenAI from "openai";
import * as dotenv from "dotenv";

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
const apiKey = process.env.OPENAI_API_KEY;

if (!apiKey) {
  throw new Error("OPENAI_API_KEY environment variable is required");
}

// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log("üîë OpenAI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑:", {
  source: apiKey.startsWith("sk-proj-")
    ? ".env —Ñ–∞–π–ª–∞ (project key)"
    : ".env —Ñ–∞–π–ª–∞ (legacy key)",
  assistant_id: process.env.OPENAI_ASSISTANT_ID,
});

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
export const openai = new OpenAI({
  apiKey: apiKey,
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenAI
export async function testOpenAIConnection(): Promise<boolean> {
  try {
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
    await openai.models.list();
    console.log("‚úÖ OpenAI connection successful");
    return true;
  } catch (error) {
    console.error("‚ùå OpenAI connection failed:", error);
    return false;
  }
}

export default openai;
