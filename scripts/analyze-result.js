const ExcelJS = require("exceljs");

async function analyzeResult() {
  try {
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile("HAUS_FAQ_Russian_with_Lithuanian.xlsx");

    console.log("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞");
    console.log("=====================================");

    const worksheets = workbook.worksheets;
    console.log(`üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: ${worksheets.length}`);

    worksheets.forEach((worksheet, index) => {
      console.log(`\nüìã –õ–∏—Å—Ç ${index + 1}: "${worksheet.name}"`);
      console.log(
        `   –†–∞–∑–º–µ—Ä: ${worksheet.rowCount} —Å—Ç—Ä–æ–∫ √ó ${worksheet.columnCount} —Å—Ç–æ–ª–±—Ü–æ–≤`
      );

      if (worksheet.name.includes("Lietuvi≈≥")) {
        console.log("   üéØ –≠—Ç–æ –ª–∏—Ç–æ–≤—Å–∫–∞—è –≤–∫–ª–∞–¥–∫–∞!");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headerRow = worksheet.getRow(1);
        console.log("   üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏:");
        headerRow.eachCell((cell, colNumber) => {
          console.log(`     –°—Ç–æ–ª–±–µ—Ü ${colNumber}: "${cell.value}"`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        console.log("   üìä –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:");
        for (
          let rowNum = 2;
          rowNum <= Math.min(5, worksheet.rowCount);
          rowNum++
        ) {
          const row = worksheet.getRow(rowNum);
          const values = [];
          row.eachCell((cell, colNumber) => {
            if (colNumber <= 4) {
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å—Ç–æ–ª–±—Ü–∞
              values.push(`"${cell.value || ""}"`);
            }
          });
          if (values.length > 0) {
            console.log(`     –°—Ç—Ä–æ–∫–∞ ${rowNum}: ${values.join(" | ")}`);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–Ø–∑—ã–∫" (8-–π —Å—Ç–æ–ª–±–µ—Ü)
        console.log('   üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ "–Ø–∑—ã–∫":');
        let langCount = { lt: 0, ru: 0, other: 0 };
        for (
          let rowNum = 2;
          rowNum <= Math.min(10, worksheet.rowCount);
          rowNum++
        ) {
          const langCell = worksheet.getRow(rowNum).getCell(8);
          const langValue = langCell.value;
          if (langValue === "lt") langCount.lt++;
          else if (langValue === "ru") langCount.ru++;
          else langCount.other++;
        }
        console.log(`     –õ–∏—Ç–æ–≤—Å–∫–∏–π (lt): ${langCount.lt}`);
        console.log(`     –†—É—Å—Å–∫–∏–π (ru): ${langCount.ru}`);
        console.log(`     –î—Ä—É–≥–æ–µ: ${langCount.other}`);
      }
    });

    console.log("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞:", error.message);
  }
}

analyzeResult();
