#!/usr/bin/env node

import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

async function checkCatalogProducts() {
  try {
    console.log('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤...');
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π thread
    const thread = await openai.beta.threads.create();
    console.log('üìù Thread —Å–æ–∑–¥–∞–Ω:', thread.id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await openai.beta.threads.messages.create(thread.id, {
      role: "user",
      content: "–ü–æ–∫–∞–∂–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ."
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: process.env.OPENAI_ASSISTANT_ID
    });

    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...');

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
    while (runStatus.status === 'queued' || runStatus.status === 'in_progress') {
      await new Promise(resolve => setTimeout(resolve, 2000));
      runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
      console.log('Status:', runStatus.status);
    }

    if (runStatus.status === 'completed') {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
      const messages = await openai.beta.threads.messages.list(thread.id);
      const assistantMessage = messages.data.find(message => message.role === 'assistant');
      if (assistantMessage) {
        const content = assistantMessage.content[0].text.value;
        console.log('üìã –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:');
        console.log(content);
        
        // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã
        const productMatches = content.match(/\b(HAUS|P6-20|S25|SM6|KL-28|SP)\b/ig) || [];
        console.log('\nüîç –í–∏–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã:', [...new Set(productMatches.map(match => match.toUpperCase()))].join(', '));
      }
    } else {
      console.log('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.');
      console.log('–î–µ—Ç–∞–ª–∏:', runStatus);
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

checkCatalogProducts();
