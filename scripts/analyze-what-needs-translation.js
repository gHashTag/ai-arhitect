const ExcelJS = require("exceljs");

async function analyzeWhatNeedsTranslation() {
  try {
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(
      "HAUS_FAQ_Russian_with_Lithuanian_Improved.xlsx"
    );

    console.log("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û –õ–ò–¢–û–í–°–ö–û–ô –í–ö–õ–ê–î–ö–ò");
    console.log("=================================================");

    // –ù–∞—Ö–æ–¥–∏–º –ª–∏—Ç–æ–≤—Å–∫—É—é –≤–∫–ª–∞–¥–∫—É
    const lithuanianSheet = workbook.worksheets.find((ws) =>
      ws.name.includes("Lietuvi≈≥")
    );

    if (!lithuanianSheet) {
      console.log("‚ùå –õ–∏—Ç–æ–≤—Å–∫–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
      return;
    }

    console.log(`üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—Å—Ç: "${lithuanianSheet.name}"`);
    console.log(
      `üìè –†–∞–∑–º–µ—Ä: ${lithuanianSheet.rowCount} —Å—Ç—Ä–æ–∫ √ó ${lithuanianSheet.columnCount} —Å—Ç–æ–ª–±—Ü–æ–≤`
    );

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
    console.log("\nüìù –ó–ê–ì–û–õ–û–í–ö–ò (—Å—Ç—Ä–æ–∫–∞ 1):");
    for (let col = 1; col <= lithuanianSheet.columnCount; col++) {
      const cell = lithuanianSheet.getCell(1, col);
      console.log(`   –°—Ç–æ–ª–±–µ—Ü ${col}: "${cell.value}"`);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    console.log("\nüìä –°–û–î–ï–†–ñ–ò–ú–û–ï (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö):");
    for (let row = 2; row <= Math.min(7, lithuanianSheet.rowCount); row++) {
      console.log(`\n--- –°–¢–†–û–ö–ê ${row} ---`);

      for (let col = 1; col <= lithuanianSheet.columnCount; col++) {
        const cell = lithuanianSheet.getCell(row, col);
        const cellValue = cell.value ? String(cell.value) : "";

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É (—Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç)
        const containsCyrillic = /[–∞-—è—ë]/i.test(cellValue);
        const status = containsCyrillic ? "‚ùå –ù–ï –ü–ï–†–ï–í–ï–î–ï–ù–û" : "‚úÖ –û–ö";

        console.log(`   –°—Ç–æ–ª–±–µ—Ü ${col}: ${status}`);
        if (cellValue.length > 0) {
          console.log(
            `      –¢–µ–∫—Å—Ç: "${cellValue.substring(0, 100)}${cellValue.length > 100 ? "..." : ""}"`
          );
        }
      }
    }

    // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —è—á–µ–µ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    let totalCells = 0;
    let russianCells = 0;

    console.log("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–í–û–î–ê:");

    for (let row = 2; row <= lithuanianSheet.rowCount; row++) {
      for (let col = 1; col <= lithuanianSheet.columnCount; col++) {
        const cell = lithuanianSheet.getCell(row, col);
        const cellValue = cell.value ? String(cell.value) : "";

        if (cellValue.length > 0) {
          totalCells++;
          if (/[–∞-—è—ë]/i.test(cellValue)) {
            russianCells++;
          }
        }
      }
    }

    console.log(`üìä –í—Å–µ–≥–æ —è—á–µ–µ–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: ${totalCells}`);
    console.log(`‚ùå –Ø—á–µ–µ–∫ —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º: ${russianCells}`);
    console.log(`‚úÖ –Ø—á–µ–µ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö: ${totalCells - russianCells}`);
    console.log(
      `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞: ${(((totalCells - russianCells) / totalCells) * 100).toFixed(1)}%`
    );

    if (russianCells > 0) {
      console.log("\nüö® –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–õ–ù–´–ô –ü–ï–†–ï–í–û–î –°–û–î–ï–†–ñ–ò–ú–û–ì–û!");
    } else {
      console.log("\nüéâ –í—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ!");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:", error.message);
  }
}

analyzeWhatNeedsTranslation();
