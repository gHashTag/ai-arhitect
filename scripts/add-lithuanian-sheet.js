const ExcelJS = require("exceljs");
const { translate } = require("@vitalets/google-translate-api");

async function translateText(text, delay = 100) {
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  await new Promise((resolve) => setTimeout(resolve, delay));

  if (!text || text.trim() === "") {
    return text;
  }

  try {
    console.log(
      `üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º: "${text.substring(0, 50)}${text.length > 50 ? "..." : ""}"`
    );
    const result = await translate(text, { from: "ru", to: "lt" });
    console.log(
      `‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: "${result.text.substring(0, 50)}${result.text.length > 50 ? "..." : ""}"`
    );
    return result.text;
  } catch (error) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: "${text.substring(0, 30)}...". –û—à–∏–±–∫–∞:`,
      error.message
    );
    return text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
  }
}

async function addLithuanianSheet() {
  const inputFile = "HAUS_FAQ_Russian.xlsx";
  const outputFile = "HAUS_FAQ_Russian_with_Lithuanian.xlsx";

  try {
    console.log("üìñ –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π Excel —Ñ–∞–π–ª...");
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(inputFile);

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ª–∏—Å—Ç
    const originalSheet = workbook.worksheets[0];
    console.log(`üìã –ò—Å—Ö–æ–¥–Ω—ã–π –ª–∏—Å—Ç: "${originalSheet.name}"`);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç –¥–ª—è –ª–∏—Ç–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    const lithuanianSheet = workbook.addWorksheet("FAQ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è (Lietuvi≈≥)");
    console.log("üìÑ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç –¥–ª—è –ª–∏—Ç–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞");

    // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headerRow = originalSheet.getRow(1);
    const newHeaderRow = lithuanianSheet.getRow(1);

    // –ü–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headerTranslations = {
      "‚Ññ": "‚Ññ",
      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: "Prioritetas",
      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "Kategorija",
      –ü—Ä–æ–¥—É–∫—Ç: "Produktas",
      "–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞": "Kliento prie≈°taravimas",
      "–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è": "Prie≈°taravimo sprendimas",
      "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞": "Rakta≈æod≈æiai",
      –Ø–∑—ã–∫: "Kalba",
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headerRow.eachCell((cell, colNumber) => {
      const originalValue = cell.value;
      const translatedValue =
        headerTranslations[originalValue] || originalValue;
      newHeaderRow.getCell(colNumber).value = translatedValue;

      // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
      newHeaderRow.getCell(colNumber).style = cell.style;
    });

    console.log("üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã");

    // –ö–æ–ø–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
    const totalRows = originalSheet.rowCount;
    console.log(`üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ ${totalRows - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö...`);

    let translatedCount = 0;

    for (let rowNum = 2; rowNum <= totalRows; rowNum++) {
      const originalRow = originalSheet.getRow(rowNum);
      const newRow = lithuanianSheet.getRow(rowNum);

      if (rowNum % 10 === 0) {
        console.log(
          `üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${rowNum - 1}/${totalRows - 1} —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`
        );
      }

      // –ö–æ–ø–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É
      await Promise.all(
        originalRow.values.map(async (cellValue, colIndex) => {
          if (colIndex === 0) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (undefined)

          const cell = newRow.getCell(colIndex);
          const originalCell = originalRow.getCell(colIndex);

          if (cellValue === null || cellValue === undefined) {
            cell.value = cellValue;
            return;
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
          const columnsToTranslate = [3, 5, 6, 7]; // –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, –û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è, –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

          if (
            columnsToTranslate.includes(colIndex) &&
            typeof cellValue === "string"
          ) {
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            cell.value = await translateText(cellValue, 200);
          } else if (colIndex === 8) {
            // –°—Ç–æ–ª–±–µ—Ü "–Ø–∑—ã–∫" - –º–µ–Ω—è–µ–º –Ω–∞ "lt"
            cell.value = "lt";
          } else {
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            cell.value = cellValue;
          }

          // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∏–ª—å —è—á–µ–π–∫–∏
          cell.style = originalCell.style;
        })
      );

      translatedCount++;
    }

    // –ö–æ–ø–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    originalSheet.columns.forEach((column, index) => {
      if (column.width) {
        lithuanianSheet.getColumn(index + 1).width = column.width;
      }
    });

    console.log(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${translatedCount} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...");
    await workbook.xlsx.writeFile(outputFile);

    console.log("üéâ –ì–æ—Ç–æ–≤–æ!");
    console.log(`üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${inputFile}`);
    console.log(`üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å –ª–∏—Ç–æ–≤—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º: ${outputFile}`);
    console.log(`üìã –î–æ–±–∞–≤–ª–µ–Ω –ª–∏—Å—Ç: "${lithuanianSheet.name}"`);
  } catch (error) {
    console.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ç–æ–≤—Å–∫–æ–π –≤–∫–ª–∞–¥–∫–∏...");
addLithuanianSheet()
  .then(() => {
    console.log("‚ú® –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
  })
  .catch((error) => {
    console.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:", error.message);
    process.exit(1);
  });
