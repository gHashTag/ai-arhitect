const ExcelJS = require("exceljs");
const fs = require("fs");

// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º FAQ –¥–ª—è –±–æ—Ç–∞
async function integrateFAQsFromExcel() {
  try {
    console.log("üìã –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø FAQ –ò–ó EXCEL –í –ë–û–¢–ê");
    console.log("==================================");

    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile("HAUS_FAQ_COMPLETE_LITHUANIAN.xlsx");

    // –ù–∞—Ö–æ–¥–∏–º —Ä—É—Å—Å–∫—É—é –∏ –ª–∏—Ç–æ–≤—Å–∫—É—é –≤–∫–ª–∞–¥–∫–∏
    const russianSheet = workbook.worksheets.find(
      (ws) => ws.name.includes("–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è") && !ws.name.includes("Lietuvi≈≥")
    );
    const lithuanianSheet = workbook.worksheets.find((ws) =>
      ws.name.includes("Lietuvi≈≥")
    );

    if (!russianSheet || !lithuanianSheet) {
      console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∫–ª–∞–¥–∫–∏ –≤ Excel —Ñ–∞–π–ª–µ");
      return;
    }

    console.log(`‚úÖ –†—É—Å—Å–∫–∞—è –≤–∫–ª–∞–¥–∫–∞: "${russianSheet.name}"`);
    console.log(`‚úÖ –õ–∏—Ç–æ–≤—Å–∫–∞—è –≤–∫–ª–∞–¥–∫–∞: "${lithuanianSheet.name}"`);

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ FAQ
    const faqs = [];
    const categories = new Set();

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä—É—Å—Å–∫–æ–π –≤–∫–ª–∞–¥–∫–∏
    console.log("\nüìñ –ß–∏—Ç–∞–µ–º —Ä—É—Å—Å–∫–∏–µ FAQ...");
    const russianFAQs = readFAQsFromSheet(russianSheet, "ru");

    console.log("\nüìñ –ß–∏—Ç–∞–µ–º –ª–∏—Ç–æ–≤—Å–∫–∏–µ FAQ...");
    const lithuanianFAQs = readFAQsFromSheet(lithuanianSheet, "lt");

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º FAQ
    faqs.push(...russianFAQs, ...lithuanianFAQs);

    // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    faqs.forEach((faq) => categories.add(faq.category));

    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚Ä¢ –†—É—Å—Å–∫–∏—Ö FAQ: ${russianFAQs.length}`);
    console.log(`   ‚Ä¢ –õ–∏—Ç–æ–≤—Å–∫–∏—Ö FAQ: ${lithuanianFAQs.length}`);
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ FAQ: ${faqs.length}`);
    console.log(`   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.size}`);

    // –°–æ–∑–¥–∞–µ–º TypeScript —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    const faqsData = {
      categories: Array.from(categories).map((cat, index) => ({
        id: cat.toLowerCase().replace(/[^a-z0-9]/g, "_"),
        name: cat,
        description: getDescriptionForCategory(cat),
        order: index + 1,
      })),
      faqs: faqs,
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript –∫–æ–¥
    const tsCode = generateFAQServiceCode(faqsData);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π FAQ —Å–µ—Ä–≤–∏—Å
    fs.writeFileSync("src/services/updatedFAQService.ts", tsCode);

    console.log("\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!");
    console.log("========================");
    console.log("üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: src/services/updatedFAQService.ts");
    console.log("üí° –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å import –≤ src/index.ts");
    console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  }
}

function readFAQsFromSheet(sheet, language) {
  const faqs = [];
  let rowIndex = 0;

  // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = {};
  sheet.getRow(1).eachCell((cell, colNumber) => {
    const value = cell.value ? String(cell.value).trim() : "";
    if (value.includes("—Ä–∏–æ—Ä–∏—Ç–µ—Ç") || value.includes("rioritet"))
      headers.priority = colNumber;
    if (value.includes("–∞—Ç–µ–≥–æ—Ä") || value.includes("ategor"))
      headers.category = colNumber;
    if (value.includes("—Ä–æ–¥—É–∫—Ç") || value.includes("rodukt"))
      headers.product = colNumber;
    if (value.includes("–æ–∑—Ä–∞–∂–µ–Ω–∏–µ") || value.includes("rie≈°tarav"))
      headers.question = colNumber;
    if (value.includes("—Ç—Ä–∞–±–æ—Ç–∫–∞") || value.includes("prendim"))
      headers.answer = colNumber;
    if (value.includes("–ª—é—á–µ–≤—ã–µ") || value.includes("rakta≈æod"))
      headers.tags = colNumber;
  });

  console.log(`   –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: ${Object.keys(headers).join(", ")}`);

  // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  for (let row = 2; row <= sheet.rowCount; row++) {
    const rowData = sheet.getRow(row);

    const priority = getCellValue(rowData, headers.priority);
    const category = getCellValue(rowData, headers.category);
    const product = getCellValue(rowData, headers.product);
    const question = getCellValue(rowData, headers.question);
    const answer = getCellValue(rowData, headers.answer);
    const tags = getCellValue(rowData, headers.tags);

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (!question || !answer) continue;

    faqs.push({
      id: `${language}_${row}_${Date.now()}`,
      question: question,
      answer: answer,
      category: category || "–û–±—â–∏–µ",
      tags: tags ? tags.split(/[,;]\s*/) : [],
      product: product || "–æ–±—â–µ–µ",
      language: language,
      priority: parseInt(priority) || 5,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    rowIndex++;
  }

  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${rowIndex}`);
  return faqs;
}

function getCellValue(row, colNumber) {
  if (!colNumber) return "";
  const cell = row.getCell(colNumber);
  return cell.value ? String(cell.value).trim() : "";
}

function getDescriptionForCategory(category) {
  const descriptions = {
    "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫–æ–≤ HAUS",
    "‚ö° –ú–æ–Ω—Ç–∞–∂": "–í–æ–ø—Ä–æ—Å—ã –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –º–æ–Ω—Ç–∞–∂—É",
    "üìä –†–∞—Å—á–µ—Ç—ã": "–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
    "üí∞ –¶–µ–Ω–∞/–≠–∫–æ–Ω–æ–º–∏—è": "–í–æ–ø—Ä–æ—Å—ã –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —ç–∫–æ–Ω–æ–º–∏–∏",
    "üöö –î–æ—Å—Ç–∞–≤–∫–∞": "–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –±–ª–æ–∫–æ–≤",
    "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã": "–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã",
    "üèóÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ": "–û–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–ª–æ–∫–æ–≤",

    "üîß Techniniai": "HAUS blok≈≥ techninƒós charakteristikos",
    "‚ö° Montavimas": "Montavimo ir ƒØrengimo klausimai",
    "üìä Skaiƒçiavimai": "Med≈æiag≈≥ kiekio skaiƒçiavimas",
    "üí∞ Kaina/Taupymas": "Kainos ir taupymo klausimai",
    "üöö Pristatymas": "Blok≈≥ pristatymo sƒÖlygos",
    "üìÑ Dokumentai": "Dokument≈≥ apyvarta ir sertifikatai",
    "üèóÔ∏è Taikymas": "Blok≈≥ taikymo sritys",
  };

  return descriptions[category] || "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã";
}

function generateFAQServiceCode(data) {
  return `export interface FAQ {
  id: string;
  question: string;
  answer: string;
  category: string;
  tags: string[];
  product: string;
  language: "lt" | "ru" | "en";
  priority: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface FAQCategory {
  id: string;
  name: string;
  description: string;
  order: number;
}

export class FAQService {
  private faqs: FAQ[] = [];
  private categories: FAQCategory[] = [];

  constructor() {
    this.initializeCategories();
    this.initializeFAQs();
  }

  private initializeCategories() {
    this.categories = ${JSON.stringify(data.categories, null, 6)};
  }

  private initializeFAQs() {
    this.faqs = [
${data.faqs
  .map(
    (faq) => `      {
        id: "${faq.id}",
        question: ${JSON.stringify(faq.question)},
        answer: ${JSON.stringify(faq.answer)},
        category: "${faq.category.toLowerCase().replace(/[^a-z0-9]/g, "_")}",
        tags: ${JSON.stringify(faq.tags)},
        product: "${faq.product}",
        language: "${faq.language}" as "lt" | "ru" | "en",
        priority: ${faq.priority},
        createdAt: new Date("${faq.createdAt.toISOString()}"),
        updatedAt: new Date("${faq.updatedAt.toISOString()}")
      }`
  )
  .join(",\n")}
    ];
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FAQ
  getAllFAQs(): FAQ[] {
    return this.faqs;
  }

  getFAQById(id: string): FAQ | undefined {
    return this.faqs.find(faq => faq.id === id);
  }

  getFAQsByLanguage(language: "lt" | "ru" | "en"): FAQ[] {
    return this.faqs.filter(faq => faq.language === language);
  }

  getFAQsByCategory(categoryId: string): FAQ[] {
    return this.faqs.filter(faq => faq.category === categoryId);
  }

  getAllCategories(): FAQCategory[] {
    return this.categories.sort((a, b) => a.order - b.order);
  }

  getCategoryById(id: string): FAQCategory | undefined {
    return this.categories.find(cat => cat.id === id);
  }

  searchFAQs(query: string, language?: "lt" | "ru" | "en"): FAQ[] {
    const searchTerm = query.toLowerCase();
    let results = this.faqs.filter(faq => 
      faq.question.toLowerCase().includes(searchTerm) ||
      faq.answer.toLowerCase().includes(searchTerm) ||
      faq.tags.some(tag => tag.toLowerCase().includes(searchTerm))
    );

    if (language) {
      results = results.filter(faq => faq.language === language);
    }

    return results.sort((a, b) => b.priority - a.priority);
  }

  addFAQ(faqData: Omit<FAQ, 'id' | 'createdAt' | 'updatedAt'>): FAQ {
    const newFAQ: FAQ = {
      ...faqData,
      id: Date.now().toString(),
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    this.faqs.push(newFAQ);
    return newFAQ;
  }

  updateFAQ(id: string, updates: Partial<Omit<FAQ, 'id' | 'createdAt'>>): FAQ | null {
    const faqIndex = this.faqs.findIndex(faq => faq.id === id);
    if (faqIndex === -1) return null;

    this.faqs[faqIndex] = {
      ...this.faqs[faqIndex],
      ...updates,
      updatedAt: new Date()
    };

    return this.faqs[faqIndex];
  }

  deleteFAQ(id: string): boolean {
    const faqIndex = this.faqs.findIndex(faq => faq.id === id);
    if (faqIndex === -1) return false;

    this.faqs.splice(faqIndex, 1);
    return true;
  }
}

export const faqService = new FAQService();
`;
}

integrateFAQsFromExcel();
