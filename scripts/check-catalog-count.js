#!/usr/bin/env node

import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

async function checkCatalogCount() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–æ–≤—ã–º Assistant...');
    console.log(`üìã Assistant ID: ${process.env.OPENAI_ASSISTANT_ID}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π thread
    const thread = await openai.beta.threads.create();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥
    await openai.beta.threads.messages.create(thread.id, {
      role: "user",
      content: "–ü–æ–∫–∞–∂–∏ –∫–∞—Ç–∞–ª–æ–≥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Assistant —Å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª—å—é
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: process.env.OPENAI_ASSISTANT_ID,
      model: "gpt-4o-mini"  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
    });
    
    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...');
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
    let attempts = 0;
    
    while ((runStatus.status === 'queued' || runStatus.status === 'in_progress') && attempts < 30) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
      attempts++;
      console.log(`Status: ${runStatus.status} (${attempts}/30)`);
    }
    
    if (runStatus.status === 'completed') {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
      const messages = await openai.beta.threads.messages.list(thread.id);
      const assistantMessage = messages.data[0];
      
      if (assistantMessage.role === 'assistant') {
        const content = assistantMessage.content[0].text.value;
        
        console.log('\nüìã –û—Ç–≤–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞:');
        console.log('‚ïê'.repeat(60));
        console.log(content);
        console.log('‚ïê'.repeat(60));
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        const productLines = content.split('\n').filter(line => {
          const cleanLine = line.trim().toLowerCase();
          return (
            cleanLine.includes('haus') || 
            cleanLine.match(/^\d+\./) ||  // –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            cleanLine.includes('–±–ª–æ–∫') ||
            cleanLine.includes('p6') ||
            cleanLine.includes('s25') ||
            cleanLine.includes('sm6')
          );
        });
        
        // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        const productNames = new Set();
        const patterns = [
          /HAUS\s+[A-Z0-9-]+/gi,
          /P\d+-\d+/gi,
          /S\d+(?!\d)/gi,
          /SM\d+/gi,
          /KL-\d+/gi
        ];
        
        patterns.forEach(pattern => {
          const matches = content.match(pattern);
          if (matches) {
            matches.forEach(match => productNames.add(match.trim().toUpperCase()));
          }
        });
        
        console.log('\nüî¢ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:');
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${productNames.size}`);
        console.log(`üìù –°—Ç—Ä–æ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏: ${productLines.length}`);
        
        if (productNames.size > 0) {
          console.log('\nüè∑Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:');
          Array.from(productNames).sort().forEach((product, index) => {
            console.log(`   ${index + 1}. ${product}`);
          });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const hasDetails = content.includes('—Ä–∞–∑–º–µ—Ä') || content.includes('√ó') || content.includes('–º–º');
        const hasQuantity = content.includes('—à—Ç') || content.includes('–ø–∞–ª–ª–µ—Ç');
        const hasUsage = content.includes('–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ') || content.includes('—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç');
        
        console.log('\nüìä –ö–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ç–∞–ª–æ–≥–∞:');
        console.log(`${hasDetails ? '‚úÖ' : '‚ùå'} –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏`);
        console.log(`${hasQuantity ? '‚úÖ' : '‚ùå'} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ`);
        console.log(`${hasUsage ? '‚úÖ' : '‚ùå'} –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è`);
        
        return productNames.size;
        
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', runStatus.status);
      if (runStatus.last_error) {
        console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', runStatus.last_error);
      }
      return 0;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return 0;
  }
}

checkCatalogCount().then(count => {
  console.log(`\nüéØ –ò–¢–û–ì–û: ${count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ`);
  if (count === 0) {
    console.log('‚ö†Ô∏è  –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  } else if (count === 1) {
    console.log('‚ö†Ô∏è  –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä');
  } else {
    console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤');
  }
});
