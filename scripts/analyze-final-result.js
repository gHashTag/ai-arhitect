const ExcelJS = require("exceljs");

async function analyzeFinalResult() {
  try {
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(
      "HAUS_FAQ_Russian_with_Lithuanian_Improved.xlsx"
    );

    console.log("üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)");
    console.log("=================================================");

    const worksheets = workbook.worksheets;
    console.log(`üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: ${worksheets.length}`);

    worksheets.forEach((worksheet, index) => {
      console.log(`\nüìã –õ–∏—Å—Ç ${index + 1}: "${worksheet.name}"`);
      console.log(
        `   –†–∞–∑–º–µ—Ä: ${worksheet.rowCount} —Å—Ç—Ä–æ–∫ √ó ${worksheet.columnCount} —Å—Ç–æ–ª–±—Ü–æ–≤`
      );

      if (worksheet.name.includes("Lietuvi≈≥")) {
        console.log("   üéØ –≠—Ç–æ –ª–∏—Ç–æ–≤—Å–∫–∞—è –≤–∫–ª–∞–¥–∫–∞!");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headerRow = worksheet.getRow(1);
        console.log("   üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã):");
        headerRow.eachCell((cell, colNumber) => {
          console.log(`     –°—Ç–æ–ª–±–µ—Ü ${colNumber}: "${cell.value}"`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–Ø–∑—ã–∫" –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        console.log('   üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ªb—Ü–∞ "–Ø–∑—ã–∫":');
        let langStats = { lt: 0, ru: 0, other: 0 };
        for (let rowNum = 2; rowNum <= worksheet.rowCount; rowNum++) {
          const langCell = worksheet.getRow(rowNum).getCell(8);
          const langValue = langCell.value;
          if (langValue === "lt") langStats.lt++;
          else if (langValue === "ru") langStats.ru++;
          else langStats.other++;
        }
        console.log(`     ‚úÖ –õ–∏—Ç–æ–≤—Å–∫–∏–π (lt): ${langStats.lt}`);
        console.log(`     ‚ùå –†—É—Å—Å–∫–∏–π (ru): ${langStats.ru}`);
        console.log(`     ‚ö†Ô∏è  –î—Ä—É–≥–æ–µ: ${langStats.other}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å—Ç–æ–ª–±–µ—Ü 3)
        console.log("   üìÇ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å—Ç–æ–ª–±–µ—Ü 3):");
        let categoryStats = {};
        for (
          let rowNum = 2;
          rowNum <= Math.min(20, worksheet.rowCount);
          rowNum++
        ) {
          const categoryCell = worksheet.getRow(rowNum).getCell(3);
          const categoryValue = categoryCell.value;
          if (categoryValue) {
            categoryStats[categoryValue] =
              (categoryStats[categoryValue] || 0) + 1;
          }
        }

        Object.entries(categoryStats).forEach(([category, count]) => {
          const isTranslated =
            category.includes("Techniniai") ||
            category.includes("Montavimas") ||
            category.includes("Skaiƒçiavimai") ||
            category.includes("Kaina") ||
            category.includes("Pristatymas") ||
            category.includes("Dokumentai") ||
            category.includes("Taikymas");
          const status = isTranslated ? "‚úÖ" : "‚ùå";
          console.log(`     ${status} "${category}": ${count} —Ä–∞–∑`);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        console.log("   üìä –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫:");
        for (
          let rowNum = 2;
          rowNum <= Math.min(7, worksheet.rowCount);
          rowNum++
        ) {
          const row = worksheet.getRow(rowNum);
          const category = row.getCell(3).value || "";
          const product = row.getCell(4).value || "";
          const objection = (row.getCell(5).value || "").substring(0, 50);
          console.log(
            `     –°—Ç—Ä–æ–∫–∞ ${rowNum}: [${category}] ${product} - "${objection}${objection.length >= 50 ? "..." : ""}"`
          );
        }
      }
    });

    console.log("\nüéØ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:");
    console.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    console.log("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –ª–∏—Ç–æ–≤—Å–∫–∏–π");
    console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü "–Ø–∑—ã–∫" –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "lt"');
    console.log("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è");
    console.log("‚ö†Ô∏è  –î–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤ API)");
    console.log(
      "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥."
    );

    console.log("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞:", error.message);
  }
}

analyzeFinalResult();
