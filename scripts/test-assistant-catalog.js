#!/usr/bin/env node

import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

async function testAssistantCatalog() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Assistant —Å –ø–æ–ª–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π thread
    const thread = await openai.beta.threads.create();
    console.log('üìù Thread —Å–æ–∑–¥–∞–Ω:', thread.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
    await openai.beta.threads.messages.create(thread.id, {
      role: "user",
      content: "–ü–æ–∫–∞–∂–∏ –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤"
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Assistant
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: process.env.OPENAI_ASSISTANT_ID
    });
    
    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç Assistant...');
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
    while (runStatus.status === 'queued' || runStatus.status === 'in_progress') {
      await new Promise(resolve => setTimeout(resolve, 1000));
      runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
    }
    
    if (runStatus.status === 'completed') {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
      const messages = await openai.beta.threads.messages.list(thread.id);
      const assistantMessage = messages.data[0];
      
      if (assistantMessage.role === 'assistant') {
        const content = assistantMessage.content[0].text.value;
        console.log('\nüìã –û—Ç–≤–µ—Ç Assistant:');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log(content);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç –ª–∏ –æ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤
        const mentionedProducts = [
          'P6-20', 'P6-15', 'P8-20', 'Corner-L', 'Corner-R', 
          'End-Cap', 'Ventilation', 'Insulation'
        ];
        
        const foundProducts = mentionedProducts.filter(product => 
          content.includes(product)
        );
        
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:');
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${foundProducts.length}/8`);
        console.log(`üìù –£–ø–æ–º—è–Ω—É—Ç—ã–µ —Ç–æ–≤–∞—Ä—ã: ${foundProducts.join(', ')}`);
        
        if (foundProducts.length >= 5) {
          console.log('üéØ –£–°–ü–ï–•! Assistant –∑–Ω–∞–µ—Ç –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ!');
        } else {
          console.log('‚ö†Ô∏è  Assistant –≤—Å–µ –µ—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥');
        }
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', runStatus.last_error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testAssistantCatalog();
