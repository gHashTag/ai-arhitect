#!/usr/bin/env node

import OpenAI from 'openai';
import dotenv from 'dotenv';

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

async function analyzeNewAssistant() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ Assistant (o3-mini) —Å Vector Store...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π thread
    const thread = await openai.beta.threads.create();
    console.log('üìù Thread —Å–æ–∑–¥–∞–Ω:', thread.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
    await openai.beta.threads.messages.create(thread.id, {
      role: "user",
      content: "–ü–æ–∫–∞–∂–∏ –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –•–æ—á—É —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, —Ä–∞–∑–º–µ—Ä–∞–º–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º. –°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤."
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Assistant
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: process.env.OPENAI_ASSISTANT_ID
    });
    
    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç Assistant...');
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
    while (runStatus.status === 'queued' || runStatus.status === 'in_progress') {
      await new Promise(resolve => setTimeout(resolve, 1500));
      runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
      console.log(`Status: ${runStatus.status}`);
    }
    
    if (runStatus.status === 'completed') {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
      const messages = await openai.beta.threads.messages.list(thread.id);
      const assistantMessage = messages.data[0];
      
      if (assistantMessage.role === 'assistant') {
        const content = assistantMessage.content[0].text.value;
        console.log('\nüìã –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –Ω–æ–≤–æ–≥–æ Assistant:');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log(content);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        const productPatterns = [
          /HAUS\s+[A-Z0-9-]+/gi,
          /P\d+-\d+/gi,
          /S\d+/gi,
          /SM\d+/gi,
          /KL-\d+/gi,
          /SP\s*\d*/gi
        ];
        
        let foundProducts = new Set();
        productPatterns.forEach(pattern => {
          const matches = content.match(pattern);
          if (matches) {
            matches.forEach(match => foundProducts.add(match.trim()));
          }
        });
        
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:');
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${foundProducts.size}`);
        console.log('üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:');
        Array.from(foundProducts).sort().forEach((product, index) => {
          console.log(`   ${index + 1}. ${product}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const hasSpecs = content.includes('√ó') || content.includes('–º–º') || content.includes('—Ä–∞–∑–º–µ—Ä');
        const hasQuantity = content.includes('—à—Ç') || content.includes('–ø–∞–ª–ª–µ—Ç') || content.includes('–ø–æ–¥–¥–æ–Ω');
        const hasUsage = content.includes('–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ') || content.includes('—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç') || content.includes('—Å—Ç–µ–Ω–∞');
        
        console.log('\nüìä –ö–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ç–∞–ª–æ–≥–∞:');
        console.log(`${hasSpecs ? '‚úÖ' : '‚ùå'} –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Ä–∞–∑–º–µ—Ä—ã)`);
        console.log(`${hasQuantity ? '‚úÖ' : '‚ùå'} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ —É–ø–∞–∫–æ–≤–∫–µ`);
        console.log(`${hasUsage ? '‚úÖ' : '‚ùå'} –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è`);
        
        return {
          products: Array.from(foundProducts),
          hasSpecs,
          hasQuantity,
          hasUsage,
          content
        };
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', runStatus.last_error);
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    return null;
  }
}

analyzeNewAssistant().then(result => {
  if (result) {
    console.log('\nüéØ –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ª–∏—Å—Ç–∞–µ–º–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏!');
  }
});
