const ExcelJS = require("exceljs");

async function checkUntranslatedContent() {
  try {
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile("HAUS_FAQ_COMPLETE_LITHUANIAN.xlsx");

    // –ù–∞—Ö–æ–¥–∏–º –ª–∏—Ç–æ–≤—Å–∫—É—é –≤–∫–ª–∞–¥–∫—É
    const lithuanianSheet = workbook.worksheets.find((ws) =>
      ws.name.includes("Lietuvi≈≥")
    );

    if (!lithuanianSheet) {
      console.log("‚ùå –õ–∏—Ç–æ–≤—Å–∫–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
      return;
    }

    console.log("üîç –ü–†–û–í–ï–†–ö–ê –ù–ï–ü–ï–†–ï–í–ï–î–ï–ù–ù–û–ì–û –°–û–î–ï–†–ñ–ò–ú–û–ì–û");
    console.log("====================================");

    let russianCells = [];

    // –ù–∞–π–¥–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    for (let row = 2; row <= lithuanianSheet.rowCount; row++) {
      for (let col = 1; col <= lithuanianSheet.columnCount; col++) {
        const cell = lithuanianSheet.getCell(row, col);
        const cellValue = cell.value ? String(cell.value) : "";

        if (cellValue.length > 0 && /[–∞-—è—ë]/i.test(cellValue)) {
          russianCells.push({
            row: row,
            col: col,
            content: cellValue,
          });
        }
      }
    }

    console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${russianCells.length} —è—á–µ–µ–∫ —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º`);

    // –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
    console.log("\nüìù –ü–†–ò–ú–ï–†–´ –ù–ï–ü–ï–†–ï–í–ï–î–ï–ù–ù–û–ì–û –°–û–î–ï–†–ñ–ò–ú–û–ì–û:");
    const examples = russianCells.slice(0, 10);

    examples.forEach((cell, index) => {
      const colName = getColumnName(cell.col);
      console.log(`\n${index + 1}. –Ø—á–µ–π–∫–∞ ${colName}${cell.row}:`);
      console.log(
        `   "${cell.content.substring(0, 100)}${cell.content.length > 100 ? "..." : ""}"`
      );
    });

    if (russianCells.length > 10) {
      console.log(`\n... –∏ –µ—â–µ ${russianCells.length - 10} —è—á–µ–µ–∫`);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
    console.log("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–û–õ–ë–¶–ê–ú:");
    const columnStats = {};
    russianCells.forEach((cell) => {
      const colName = getColumnName(cell.col);
      columnStats[colName] = (columnStats[colName] || 0) + 1;
    });

    Object.entries(columnStats).forEach(([col, count]) => {
      const colDescription = getColumnDescription(col);
      console.log(`   ${col} (${colDescription}): ${count} —è—á–µ–µ–∫`);
    });

    console.log(
      `\nüéØ –ò–¢–û–ì–û: –ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ${russianCells.length} —è—á–µ–µ–∫ –≤—Ä—É—á–Ω—É—é`
    );

    return russianCells;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  }
}

function getColumnName(colNumber) {
  const columns = ["", "A", "B", "C", "D", "E", "F", "G", "H"];
  return columns[colNumber] || `Col${colNumber}`;
}

function getColumnDescription(colName) {
  const descriptions = {
    A: "‚Ññ",
    B: "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    C: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
    D: "–ü—Ä–æ–¥—É–∫—Ç",
    E: "–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞",
    F: "–û—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
    G: "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
    H: "–Ø–∑—ã–∫",
  };
  return descriptions[colName] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
}

checkUntranslatedContent();
